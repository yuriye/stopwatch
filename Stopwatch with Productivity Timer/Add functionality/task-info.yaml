type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'

    android {
        compileSdkVersion 28

        defaultConfig {
            applicationId "org.hyperskill.stopwatch"
            minSdkVersion 21
            // DO NOT CHANGE THIS VALUE
            // Because this version related with robolectic version too
            // noinspection OldTargetApi,ExpiredTargetSdkVersion
            targetSdkVersion 28
            versionCode 2
            versionName "1.1"
            testInstrumentationRunner "com.edu.AndroidEduTestRunner"
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        implementation 'androidx.core:core-ktx:1.3.2'
        implementation 'androidx.appcompat:appcompat:1.2.0'
        implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
        testImplementation 'junit:junit:4.12'

        // Robolectric
        // http://robolectric.org
        testImplementation "org.robolectric:robolectric:$robolectric_version"
    }
  learner_created: false
- name: src/main/AndroidManifest.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <manifest xmlns:android="http://schemas.android.com/apk/res/android"
        package="org.hyperskill.stopwatch">

      <application
          android:allowBackup="true"
          android:icon="@mipmap/ic_launcher"
          android:label="@string/app_name"
          android:roundIcon="@mipmap/ic_launcher_round"
          android:supportsRtl="true"
          android:theme="@style/AppTheme">
        <activity android:name="org.hyperskill.stopwatch.MainActivity">
          <intent-filter>
            <action android:name="android.intent.action.MAIN" />

            <category android:name="android.intent.category.LAUNCHER" />
          </intent-filter>
        </activity>
      </application>

    </manifest>
  learner_created: false
- name: src/main/res/layout/activity_main.xml
  visible: true
  text: |
    <?xml version="1.0" encoding="utf-8"?>
    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        xmlns:tools="http://schemas.android.com/tools"
        android:id="@+id/Stopwatch"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">

            <TextView
                android:id="@+id/textView"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="0:03" />

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal">
                android:layout_weight="1"

                <Button
                    android:id="@+id/startButton"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="Start"
                    tools:layout_editor_absoluteX="7dp"
                    tools:layout_editor_absoluteY="9dp" />

                <Button
                    android:id="@+id/resetButton"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="Reset"
                    tools:layout_editor_absoluteX="307dp"
                    tools:layout_editor_absoluteY="9dp" />
            </LinearLayout>

        </LinearLayout>

    </androidx.constraintlayout.widget.ConstraintLayout>
  learner_created: false
- name: src/main/res/values/colors.xml
  visible: true
  text: |
    <?xml version="1.0" encoding="utf-8"?>
    <resources>
        <color name="colorPrimary">#008577</color>
        <color name="colorPrimaryDark">#00574B</color>
        <color name="colorAccent">#D81B60</color>
    </resources>
  learner_created: false
- name: src/main/res/values/styles.xml
  visible: true
  text: |
    <resources>

        <!-- Base application theme. -->
        <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
            <!-- Customize your theme here. -->
            <item name="colorPrimary">@color/colorPrimary</item>
            <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
            <item name="colorAccent">@color/colorAccent</item>
        </style>

    </resources>
  learner_created: false
- name: src/main/res/values/strings.xml
  visible: true
  text: |
    <resources>
        <string name="app_name">Stopwatch with Productivity Timer</string>
    </resources>
  learner_created: false
- name: src/main/res/drawable/ic_launcher_background.xml
  visible: true
  text: |
    <?xml version="1.0" encoding="utf-8"?>
    <vector xmlns:android="http://schemas.android.com/apk/res/android"
        android:width="108dp"
        android:height="108dp"
        android:viewportWidth="108"
        android:viewportHeight="108">
        <path
            android:fillColor="#008577"
            android:pathData="M0,0h108v108h-108z" />
        <path
            android:fillColor="#00000000"
            android:pathData="M9,0L9,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,0L19,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M29,0L29,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M39,0L39,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M49,0L49,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M59,0L59,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M69,0L69,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M79,0L79,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M89,0L89,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M99,0L99,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,9L108,9"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,19L108,19"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,29L108,29"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,39L108,39"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,49L108,49"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,59L108,59"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,69L108,69"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,79L108,79"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,89L108,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,99L108,99"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,29L89,29"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,39L89,39"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,49L89,49"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,59L89,59"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,69L89,69"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,79L89,79"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M29,19L29,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M39,19L39,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M49,19L49,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M59,19L59,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M69,19L69,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M79,19L79,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
    </vector>
  learner_created: false
- name: src/main/res/drawable-v24/ic_launcher_foreground.xml
  visible: true
  text: |
    <vector xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:aapt="http://schemas.android.com/aapt"
        android:width="108dp"
        android:height="108dp"
        android:viewportWidth="108"
        android:viewportHeight="108">
        <path
            android:fillType="evenOdd"
            android:pathData="M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"
            android:strokeWidth="1"
            android:strokeColor="#00000000">
            <aapt:attr name="android:fillColor">
                <gradient
                    android:endX="78.5885"
                    android:endY="90.9159"
                    android:startX="48.7653"
                    android:startY="61.0927"
                    android:type="linear">
                    <item
                        android:color="#44000000"
                        android:offset="0.0" />
                    <item
                        android:color="#00000000"
                        android:offset="1.0" />
                </gradient>
            </aapt:attr>
        </path>
        <path
            android:fillColor="#FFFFFF"
            android:fillType="nonZero"
            android:pathData="M66.94,46.02L66.94,46.02C72.44,50.07 76,56.61 76,64L32,64C32,56.61 35.56,50.11 40.98,46.06L36.18,41.19C35.45,40.45 35.45,39.3 36.18,38.56C36.91,37.81 38.05,37.81 38.78,38.56L44.25,44.05C47.18,42.57 50.48,41.71 54,41.71C57.48,41.71 60.78,42.57 63.68,44.05L69.11,38.56C69.84,37.81 70.98,37.81 71.71,38.56C72.44,39.3 72.44,40.45 71.71,41.19L66.94,46.02ZM62.94,56.92C64.08,56.92 65,56.01 65,54.88C65,53.76 64.08,52.85 62.94,52.85C61.8,52.85 60.88,53.76 60.88,54.88C60.88,56.01 61.8,56.92 62.94,56.92ZM45.06,56.92C46.2,56.92 47.13,56.01 47.13,54.88C47.13,53.76 46.2,52.85 45.06,52.85C43.92,52.85 43,53.76 43,54.88C43,56.01 43.92,56.92 45.06,56.92Z"
            android:strokeWidth="1"
            android:strokeColor="#00000000" />
    </vector>
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
        <background android:drawable="@drawable/ic_launcher_background" />
        <foreground android:drawable="@drawable/ic_launcher_foreground" />
    </adaptive-icon>
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
        <background android:drawable="@drawable/ic_launcher_background" />
        <foreground android:drawable="@drawable/ic_launcher_foreground" />
    </adaptive-icon>
  learner_created: false
- name: src/main/java/org/hyperskill/stopwatch/MainActivity.kt
  visible: true
  text: |-
    package org.hyperskill.stopwatch

    import android.os.Bundle
    import androidx.appcompat.app.AppCompatActivity

    class MainActivity : AppCompatActivity() {
        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            setContentView(R.layout.activity_main)
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/stopwatch/ExampleUnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.stopwatch

    import android.app.Activity
    import android.widget.Button
    import android.widget.TextView
    import org.junit.Assert.assertEquals
    import org.junit.Test
    import org.junit.runner.RunWith
    import org.robolectric.Robolectric
    import org.robolectric.RobolectricTestRunner

    import org.hyperskill.stopwatch.TestUtils.findViewByString

    // Version 1.4
    @RunWith(RobolectricTestRunner::class)
    class ExampleUnitTest {

        private val activityController = Robolectric.buildActivity(MainActivity::class.java)

        private val activity: Activity by lazy {
            activityController.setup().get()
        }
        private val startButton: Button by lazy {
            findViewByString("startButton", activity)
        }
        private val resetButton: Button by lazy {
            findViewByString("resetButton", activity)
        }
        private val textView: TextView by lazy {
            findViewByString("textView", activity)
        }


        @Test
        fun testShouldCheckStartButtonExist() {
            startButton
        }

        @Test
        fun testShouldCheckResetButtonExist() {
            resetButton
        }

        @Test
        fun testShouldCheckTextViewExist() {
            textView
        }

        @Test
        fun testShouldCheckStartButtonText() {
            val message = "in button property \"text\""
            assertEquals(message, "Start", startButton.text)
        }

        @Test
        fun testShouldCheckResetButtonText() {
            val message = "in button property \"text\""
            assertEquals(message, "Reset", resetButton.text)
        }
    }
  learner_created: false
- name: src/test/java/resources/robolectric.properties
  visible: false
  text: sdk=28
  learner_created: false
- name: src/test/java/org/hyperskill/stopwatch/TestUtils.kt
  visible: false
  text: |-
    package org.hyperskill.stopwatch

    import android.app.Activity
    import android.view.View
    import org.junit.Assert

    // Version 1.4
    object TestUtils {

        inline fun <reified T> findViewByString(idString: String, activity: Activity): T {
            val id = activity.resources.getIdentifier(idString, "id", activity.packageName)
            val view: View? = activity.findViewById(id)

            val idNotFoundMessage = "View with id \"$idString\" was not found"
            val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                    "Expected ${T::class.java.simpleName} found ${view?.javaClass?.simpleName}"

            Assert.assertNotNull(idNotFoundMessage, view)
            Assert.assertTrue(wrongClassMessage, view is T)

            return view as T
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/stopwatch/TimerStateUnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.stopwatch

    import android.app.Activity
    import android.os.Looper.getMainLooper
    import android.widget.Button
    import android.widget.TextView
    import org.junit.Assert.assertEquals
    import org.junit.Test
    import org.junit.runner.RunWith
    import org.robolectric.Robolectric
    import org.robolectric.RobolectricTestRunner
    import org.robolectric.Shadows.shadowOf

    import org.hyperskill.stopwatch.TestUtils.findViewByString
    import java.util.concurrent.TimeUnit

    //Version 1.4
    @RunWith(RobolectricTestRunner::class)
    class TimerStateUnitTest {

        private val activityController = Robolectric.buildActivity(MainActivity::class.java)

        private val activity: Activity by lazy {
            activityController.setup().get()
        }
        private val startButton: Button by lazy {
            findViewByString("startButton", activity)
        }
        private val resetButton: Button by lazy {
            findViewByString("resetButton", activity)
        }
        private val textView: TextView by lazy {
            findViewByString("textView", activity)
        }

        private val messageTextViewAssertionError = "in TextView property \"text\""

        @Test
        fun testShouldCheckTimerInitialValue() {
            val expected = "00:00"

            val actual = textView.text
            assertEquals(messageTextViewAssertionError, expected, actual)
        }

        @Test
        fun testShouldTakeOneSecondToCountOneSecondOnStartButtonClick() {
            val expected = "00:00"

            startButton.performClick()
            Thread.sleep(300)
            shadowOf(getMainLooper()).idleFor(300, TimeUnit.MILLISECONDS)

            val actual = textView.text
            assertEquals(messageTextViewAssertionError, expected, actual)
        }

        @Test
        fun testShouldCountOneSecondAfterOneSecondOnStartButtonClick() {
            val expected = "00:01"

            startButton.performClick()
            Thread.sleep(1100)
            shadowOf(getMainLooper()).idleFor(1100, TimeUnit.MILLISECONDS)

            val actual = textView.text
            assertEquals(messageTextViewAssertionError, expected, actual)
        }


        @Test
        fun testShouldStopTimerAndResetCountOnResetButtonClick() {
            val expected = "00:00"

            startButton.performClick()
            Thread.sleep(1100)
            shadowOf(getMainLooper()).idleFor(1100, TimeUnit.MILLISECONDS)

            resetButton.performClick()
            Thread.sleep(200)
            shadowOf(getMainLooper()).idleFor(200, TimeUnit.MILLISECONDS)

            val actual = textView.text
            assertEquals(messageTextViewAssertionError, expected, actual)
        }

        @Test
        fun testShouldContinueCountOnPressingStartButtonAgain() {
            val expected = "00:02"
            startButton.performClick()
            Thread.sleep(1100)
            shadowOf(getMainLooper()).idleFor(1100, TimeUnit.MILLISECONDS)

            startButton.performClick()
            startButton.performClick()
            startButton.performClick()
            Thread.sleep(1100)
            shadowOf(getMainLooper()).idleFor(1100, TimeUnit.MILLISECONDS)

            val actual = textView.text
            assertEquals(messageTextViewAssertionError, expected, actual)
        }

        @Test
        fun testShouldIgnorePressingResetButtonAgain() {
            val expected = "00:00"

            startButton.performClick()
            Thread.sleep(1100)
            shadowOf(getMainLooper()).idleFor(1100, TimeUnit.MILLISECONDS)

            resetButton.performClick()
            Thread.sleep(200)
            shadowOf(getMainLooper()).idleFor(200, TimeUnit.MILLISECONDS)

            resetButton.performClick()
            Thread.sleep(200)
            shadowOf(getMainLooper()).idleFor(200, TimeUnit.MILLISECONDS)

            val actual = textView.text
            assertEquals(messageTextViewAssertionError, expected, actual)
        }

    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/9287#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 11 Jun 2022 19:26:50 UTC
record: 1
